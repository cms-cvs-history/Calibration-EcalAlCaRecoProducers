#
#  run on collection of electrons to make a collection of AlCaReco electrons 
#  and store them in the output collection
#
process AlCaElectronsProduction = 
{

  #include "FWCore/MessageLogger/data/MessageLogger.cfi"

  service = MessageLogger {
     untracked vstring destinations = {"cout"}
     untracked PSet cout = {
       untracked  PSet default = { untracked int32 limit = 0 }
     }
  }



  include "Calibration/EcalAlCaRecoProducers/data/alcastreamElectron.cff"
  include "Calibration/EcalAlCaRecoProducers/data/alcastreamElectronOutput.cff"

  # input module. assume root file contains EcalRecHits
  source = PoolSource 
  {
    # Number of events program should run
    untracked vstring fileNames = {
     '/store/unmerged/RelVal/2006/9/19/RelVal100Higgs-ZZ-4E/GEN-SIM-DIGI-RECO/0005/D8169C2C-0A48-DB11-B3B3-000E0C4D379C.root'
#    'rfio:/castor/cern.ch/cms/T0Prototype/Reco/092/Wenu/022A43C6-8B3E-DB11-AC3D-00E08128F0FF.RECO.root'	
#    'rfio:/castor/cern.ch/cms/T0Prototype/Reco/092/minbias/10D935A8-ED27-DB11-A7FA-00E0813395C4.RECO.root'
#    '/store/unmerged/RelVal/2006/8/13/RelVal090Z-EE/GEN-SIM-DIGI-RECO/0005/DE55F8DE-1E2B-DB11-BF2E-0030485628C6.root'
    }
    untracked int32 maxEvents = 100
  }

  # output module 
  module out = PoolOutputModule
  {
     untracked string fileName = "alCaElectrons.root" 
     using alcastreamElectronOutput
  }  

  path pathAlcastreamElectron = {seqAlcastreamElectron}

  endpath outpath = { out }
}
